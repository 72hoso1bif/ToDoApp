name: CI/CD ToDo App

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  backend: 
    name: Backend - Units & Integrations
    runs-on: ubuntu-18.04
    
    services:
      # Label used to access the service container
      db:
        # Docker Hub image
        image: postgres:13.1-alpine
        # Provide the password for postgres 
        ports: ['5432:5432']
        env:
          POSTGRES_USER: compose_postgres
          POSTGRES_PASSWORD: compose_postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v1   
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.x
      - name: Cache Maven Dependecies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: | 
            ${{ runner.os }}-maven-
      - name: Maven Verify
        run: mvn -B clean verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/postgres
          SPRING_DATASOURCE_USERNAME: compose_postgres
          SPRING_DATASOURCE_PASSWORD: compose_postgres
          
      - name: Build, Push and Deploy to Heroku 
        id: heroku 
        uses: jctaveras/heroku-deploy@v1.0.0 
        with: 
          email: ${{ secrets.HEROKU_EMAIL }} 
          api_key: ${{ secrets.HEROKU_API_KEY }} # your heroku api key
          app_name: ${{ secrets.HEROKU_APP_NAME }} # you aplicationname 
          dockerfile: '/src/main/docker/backend/Dockerfile' 
  frontend: 
    name: Frontend Build and Test 
    runs-on: ubuntu-latest 
    steps: 
    - name: Checkout 
      uses: actions/checkout@v2 
    - name: Use Node 12.x 
      uses: actions/setup-node@v1 
      with: 
        node-version: '12.x'
    - name: Cache NPM dependencies
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-npm-cache-
    - name: Install dependencies 
      run: npm ci
    - name: Build
      run: npm run ci:frontend:build 
    - name: Test 
      run: npm run ci:frontend:test
    - name: Build, Push and Deploy to Heroku 
      id: heroku 
      uses: jctaveras/heroku-deploy@v1.0.0 
      with: 
          email: ${{ secrets.HEROKU_EMAIL }} 
          api_key: ${{ secrets.HEROKU_API_KEY }} # your heroku api key
          app_name: ${{ secrets.HEROKU_APP_NAME }} # you aplicationname 
          dockerfile: '/src/main/docker/frontend/Dockerfile'
